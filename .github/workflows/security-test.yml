name: Security Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 1. 依存関係の脆弱性チェック
      - name: Run OWASP Dependency Check
        run: ./gradlew dependencyCheckAnalyze --continue

      # 2. コード内の機密情報検出
      - name: Secret Detection
        run: |
          echo "=== 機密情報検出テスト ==="
          
          # APIキーパターンの検出
          echo "APIキーパターンをチェック中..."
          if grep -r "AIza[0-9A-Za-z_-]{35}" src/ --exclude-dir=.git || \
             grep -r "sk-[0-9A-Za-z]{48}" src/ --exclude-dir=.git || \
             grep -r "Bearer [A-Za-z0-9\-\._~\+\/]+=*" src/ --exclude-dir=.git; then
            echo "❌ ハードコードされたAPIキーが検出されました"
            exit 1
          else
            echo "✅ APIキーの漏洩は検出されませんでした"
          fi

          # パスワードパターンの検出
          echo "パスワードパターンをチェック中..."
          if grep -ri "password.*=" src/ --include="*.java" --include="*.yml" | grep -v "dummy\|placeholder\|example"; then
            echo "❌ ハードコードされたパスワードが検出されました"
            exit 1
          else
            echo "✅ パスワードの漏洩は検出されませんでした"
          fi

      # 3. AI関連セキュリティチェック
      - name: AI Security Check
        run: |
          echo "=== AI関連セキュリティチェック ==="
          
          # プロンプトインジェクション対策の確認
          echo "プロンプトインジェクション対策をチェック中..."
          if ! grep -r "sanitize\|validate\|escape" src/main/java/importApp/service/AIService.java; then
            echo "⚠️ AIService.javaにプロンプト検証処理が見つかりません"
          fi

          # AIサービスのエラーハンドリング確認
          echo "AIサービスのエラーハンドリングをチェック中..."
          if grep -r "try.*catch" src/main/java/importApp/service/AIService.java; then
            echo "✅ AIServiceにエラーハンドリングが実装されています"
          else
            echo "❌ AIServiceにエラーハンドリングが不足しています"
            exit 1
          fi

          # レスポンス検証の確認
          echo "AIレスポンス検証をチェック中..."
          if grep -r "extractJsonFromText\|parseGeminiResponse" src/main/java/importApp/service/AIService.java; then
            echo "✅ AIレスポンスの検証処理が実装されています"
          else
            echo "❌ AIレスポンスの検証が不足しています"
            exit 1
          fi

      # 4. 設定ファイルのセキュリティチェック
      - name: Configuration Security Check
        run: |
          echo "=== 設定ファイルセキュリティチェック ==="
          
          # 本番設定でダミー値が使用されているか確認（GitHubActionsで置換される）
          echo "本番設定のダミー値使用をチェック中..."
          if grep -r "dummy_.*" src/main/resources/application-prod.yml; then
            echo "✅ 本番設定でダミー値が使用されています（GitHubActionsで置換される）"
          else
            echo "❌ 本番設定でダミー値が使用されていません"
            exit 1
          fi

          # デバッグ情報の無効化確認
          echo "デバッグ設定をチェック中..."
          if ! grep -r "debug.*true" src/main/resources/application-prod.yml; then
            echo "✅ 本番設定でデバッグが無効化されています"
          else
            echo "❌ 本番設定でデバッグが有効になっています"
            exit 1
          fi

      # 5. JWT設定のセキュリティチェック
      - name: JWT Security Check
        run: |
          echo "=== JWT設定セキュリティチェック ==="
          
          # JWT秘密鍵の長さチェック（本番設定）
          if grep -q "dummy_jwt_secret" src/main/resources/application-prod.yml; then
            echo "✅ 本番設定でダミー値が使用されています（環境変数に置換される想定）"
          fi
          
          # JWTサービスのセキュリティ実装確認
          if grep -r "extractUserId\|generateToken" src/main/java/importApp/security/JwtService.java 2>/dev/null; then
            echo "✅ JWTサービスが実装されています"
          else
            echo "⚠️ JWTサービスが見つかりません"
          fi

      # 6. API セキュリティチェック
      - name: API Security Check
        run: |
          echo "=== API セキュリティチェック ==="
          
          # 認証が必要なエンドポイントの確認
          echo "認証機能をチェック中..."
          if grep -r "@RequestHeader.*Authorization" src/main/java/importApp/controller/; then
            echo "✅ コントローラーで認証ヘッダーがチェックされています"
          else
            echo "❌ 認証ヘッダーのチェックが不足しています"
            exit 1
          fi

          # CORS設定の確認
          echo "CORS設定をチェック中..."
          if grep -r "@CrossOrigin" src/main/java/importApp/controller/; then
            echo "⚠️ CORS設定が見つかりました - 本番環境では適切に制限してください"
          fi

          # SQLインジェクション対策（MyBatis使用確認）
          echo "SQLインジェクション対策をチェック中..."
          if grep -r "@Param\|#{" src/main/resources/importApp/mapper/; then
            echo "✅ MyBatisのパラメータ化クエリが使用されています"
          else
            echo "❌ パラメータ化クエリが不足している可能性があります"
            exit 1
          fi

      # 7. レポート生成
      - name: Security Report
        if: always()
        run: |
          echo "=== セキュリティテスト完了レポート ==="
          echo "実行日時: $(date)"
          echo "ブランチ: ${{ github.ref }}"
          echo "コミット: ${{ github.sha }}"
          echo ""
          echo "✅ 実行されたセキュリティチェック:"
          echo "  - 依存関係の脆弱性スキャン"
          echo "  - 機密情報の検出"
          echo "  - AI関連セキュリティチェック"
          echo "  - 設定ファイルのセキュリティ"
          echo "  - JWT設定の検証"
          echo "  - API セキュリティチェック"
          echo ""
          echo "詳細は上記のログを確認してください。"