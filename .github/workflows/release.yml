name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      # 1. リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. JavaとGradleのセットアップ
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      #権限付与
      - name: permission for gradlew
        run: chmod +x ./gradlew

      # 3. `application-dummy.yml`を置換
      - name: Replace placeholders in application-dummy.yml
        run: |
          sed -i "s/db_dummy_host/${{ secrets.DB_HOST }}/g" src/main/resources/application-prod.yml
          sed -i "s/db_dummy_port/${{ secrets.DB_PORT }}/g" src/main/resources/application-prod.yml
          sed -i "s/db_dummy_name/${{ secrets.DB_NAME }}/g" src/main/resources/application-prod.yml
          sed -i "s/db_dummy_username/${{ secrets.DB_USERNAME }}/g" src/main/resources/application-prod.yml
          sed -i "s/db_dummy_password/${{ secrets.DB_PASSWORD }}/g" src/main/resources/application-prod.yml
          sed -i "s/dummy_jwt_secret/${{ secrets.JWT_SECRET }}/g" src/main/resources/application-prod.yml
          sed -i "s/dummy_gemini_key/${{ secrets.GEMINI_API_KEY }}/g" src/main/resources/application-prod.yml
          sed -i "s/dummy_google_client_id/${{ secrets.GOOGLE_CLIENT_ID }}/g" src/main/resources/application-prod.yml
          sed -i "s/dummy_google_client_secret/${{ secrets.GOOGLE_CLIENT_SECRET }}/g" src/main/resources/application-prod.yml

      # 4. Gradleでビルド
      - name: Build with Gradle
        run: ./gradlew clean Assemble -Dspring.profiles.active=prod --info

      # 5. AWS認証情報の設定（Session Manager用）
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. S3経由でJARファイル転送
      - name: Upload JAR to S3
        run: |
          # JARファイルをS3にアップロード
          JAR_FILE=$(ls build/libs/*.jar | head -1)
          JAR_NAME=$(basename "$JAR_FILE")
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          S3_KEY="deploys/${TIMESTAMP}/${JAR_NAME}"
          
          # S3バケット名（既存または新規作成）
          S3_BUCKET="sbm-deploy-${{ secrets.AWS_REGION }}"
          
          # バケットが存在しない場合は作成
          aws s3 mb "s3://${S3_BUCKET}" --region ${{ secrets.AWS_REGION }} 2>/dev/null || true
          
          # JARをS3にアップロード
          aws s3 cp "$JAR_FILE" "s3://${S3_BUCKET}/${S3_KEY}" \
            --region ${{ secrets.AWS_REGION }}
          
          echo "S3_BUCKET=${S3_BUCKET}" >> $GITHUB_ENV
          echo "S3_KEY=${S3_KEY}" >> $GITHUB_ENV

      # 7. Session Manager経由でS3からダウンロード・デプロイ
      - name: Deploy from S3 via Session Manager
        run: |
          # Session Manager経由でS3からダウンロード・配置
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              \"sudo systemctl stop sbm-app\",
              \"aws s3 cp s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY }} /tmp/sbm-app.jar\",
              \"sudo mv /tmp/sbm-app.jar /srv/sbm/api/\",
              \"sudo chmod 755 /srv/sbm/api/sbm-app.jar\",
              \"sudo chown ${{ secrets.USER }}:${{ secrets.USER }} /srv/sbm/api/sbm-app.jar\"
            ]" \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query "Command.CommandId")
          
          # コマンド実行完了を待機（最大5分）
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }}
          
          # 実行結果を確認
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query "Status")
          
          # 詳細なログを出力
          echo "Command Status: $STATUS"
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --output json
          
          if [ "$STATUS" != "Success" ]; then
            echo "JAR deployment failed with status: $STATUS"
            exit 1
          fi

      # 8. S3の古いファイルを削除（7日以上前）
      - name: Clean up old S3 files
        run: |
          # 7日以上前のデプロイファイルを削除
          aws s3 rm "s3://${{ env.S3_BUCKET }}/deploys/" \
            --recursive \
            --region ${{ secrets.AWS_REGION }} \
            --exclude "*" \
            --include "deploys/*" \
            --exclude "deploys/$(date -d '7 days ago' +%Y%m%d)*" || true

      # 9. Session Manager経由でアプリケーション再起動
      - name: Restart application via Session Manager  
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo systemctl start sbm-app"]' \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query "Command.CommandId")
          
          # コマンド実行完了を待機
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }}
          
          # 実行結果を確認
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query "Status")
          
          if [ "$STATUS" != "Success" ]; then
            echo "Application restart failed with status: $STATUS"
            exit 1
          fi

      # 10. Session Manager経由で権限修正
      - name: Fix permissions via Session Manager
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "sudo chmod -R 755 /srv/sbm/api",
              "sudo chown -R ${{ secrets.USER }}:${{ secrets.USER }} /srv/sbm/api"
            ]' \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query "Command.CommandId")
          
          # コマンド実行完了を待機
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }}
          
          # 実行結果を確認
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query "Status")
          
          if [ "$STATUS" != "Success" ]; then
            echo "Permission fix failed with status: $STATUS"
            exit 1
          fi
